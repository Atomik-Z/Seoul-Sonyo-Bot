
import discord
from discord.ext import commands
from discord import app_commands
import sqlite3
import random
import asyncio
import os
from datetime import datetime
from typing import Optional

# Configuration du bot
TOKEN = os.environ.get('DISCORD_TOKEN')  # Remplacez par votre token
intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix='!', intents=intents)

# === FONCTIONS UTILITAIRES ===

def init_db():
    """Initialise la base de donn√©es SQLite"""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # Table pour les niveaux d'anciennet√© des membres
    cursor.execute("""CREATE TABLE IF NOT EXISTS user_levels (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        level INTEGER DEFAULT 1,
        exp INTEGER DEFAULT 0,
        total_messages INTEGER DEFAULT 0,
        last_message_time REAL DEFAULT 0
    )""")

    # Table pour les personnages de jeu de r√¥le
    cursor.execute("""CREATE TABLE IF NOT EXISTS characters (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        character_name TEXT UNIQUE,
        specialty TEXT,
        chant INTEGER DEFAULT 1,
        danse INTEGER DEFAULT 1,
        eloquence INTEGER DEFAULT 1,
        acting INTEGER DEFAULT 1,
        fitness INTEGER DEFAULT 1,
        esthetique INTEGER DEFAULT 1,
        reputation INTEGER DEFAULT 500,
        chant_exp INTEGER DEFAULT 0,
        danse_exp INTEGER DEFAULT 0,
        eloquence_exp INTEGER DEFAULT 0,
        acting_exp INTEGER DEFAULT 0,
        fitness_exp INTEGER DEFAULT 0,
        esthetique_exp INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES user_levels (user_id)
    )""")

    conn.commit()
    conn.close()

def calc_level_exp(level):
    """Calcule l'XP n√©cessaire pour atteindre un niveau donn√©"""
    if level == 1:
        return 200
    base = 200
    for i in range(2, level + 1):
        base = int(base * 1.4)
    return base

def calc_stat_exp(level):
    """Calcule l'XP n√©cessaire pour les statistiques de personnage"""
    if level == 1:
        return 5000
    base = 5000
    for i in range(2, level + 1):
        base += 120 * i
    return base

def get_seniority_role(level):
    """Retourne le r√¥le d'anciennet√© bas√© sur le niveau"""
    if 1 <= level <= 9:
        return "newcomer"
    elif 10 <= level <= 19:
        return "rising"
    elif 20 <= level <= 29:
        return "yapper"
    else:
        return "go outside touch some grass"

def get_character_limit(seniority_role):
    """Retourne la limite de personnages bas√©e sur l'anciennet√©"""
    limits = {
        "newcomer": 3,
        "rising": 4,
        "yapper": 5,
        "go outside touch some grass": float('inf')
    }
    return limits.get(seniority_role, 3)

# === √âV√âNEMENTS DU BOT ===

@bot.event
async def on_ready():
    """√âv√©nement d√©clench√© quand le bot se connecte"""
    print(f'ü§ñ {bot.user} est connect√© et pr√™t!')
    init_db()

    # Synchroniser les commandes slash
    try:
        synced = await bot.tree.sync()
        print(f"‚ö° Synchronis√© {len(synced)} slash command(s)")
    except Exception as e:
        print(f"‚ùå Erreur lors de la synchronisation: {e}")

@bot.event
async def on_message(message):
    """G√®re le syst√®me d'XP pour chaque message"""
    if message.author.bot:
        return

    # Cooldown pour √©viter le spam (optionnel)
    current_time = datetime.now().timestamp()

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    user_id = message.author.id
    username = str(message.author)

    # R√©cup√©rer ou cr√©er l'utilisateur
    cursor.execute("SELECT * FROM user_levels WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()

    if not user:
        cursor.execute("""INSERT INTO user_levels 
                         (user_id, username, last_message_time) 
                         VALUES (?, ?, ?)""", (user_id, username, current_time))
        user = (user_id, username, 1, 0, 0, current_time)

    # Ajouter de l'XP al√©atoire (3-5 points)
    exp_gain = random.randint(3, 5)
    new_exp = user[3] + exp_gain
    new_total_messages = user[4] + 1
    current_level = user[2]

    # V√©rifier les mont√©es de niveau
    new_level = current_level
    level_ups = 0

    while True:
        exp_needed = calc_level_exp(new_level + 1)
        if new_exp >= exp_needed:
            new_level += 1
            new_exp -= exp_needed
            level_ups += 1
        else:
            break

    # Si mont√©e de niveau
    if level_ups > 0:
        # Message de mont√©e de niveau
        if level_ups == 1:
            await message.channel.send(f"üéâ {message.author.mention} a atteint le niveau **{new_level}** !")
        else:
            await message.channel.send(f"üöÄ {message.author.mention} a gagn√© **{level_ups} niveaux** et atteint le niveau **{new_level}** !")

        # G√©rer les r√¥les d'anciennet√©
        await update_seniority_roles(message.author, new_level, message.guild)

    # Mettre √† jour la base de donn√©es
    cursor.execute("""UPDATE user_levels 
                     SET level = ?, exp = ?, total_messages = ?, username = ?, last_message_time = ? 
                     WHERE user_id = ?""",
                   (new_level, new_exp, new_total_messages, username, current_time, user_id))

    conn.commit()
    conn.close()

    await bot.process_commands(message)

async def update_seniority_roles(member, level, guild):
    """Met √† jour les r√¥les d'anciennet√© d'un membre"""
    if not guild:
        return

    new_role_name = get_seniority_role(level)
    old_roles = ["newcomer", "rising", "yapper", "go outside touch some grass"]

    # Supprimer les anciens r√¥les d'anciennet√©
    for role_name in old_roles:
        role = discord.utils.get(guild.roles, name=role_name)
        if role and role in member.roles:
            try:
                await member.remove_roles(role)
            except discord.Forbidden:
                print(f"‚ùå Pas de permission pour supprimer le r√¥le {role_name}")

    # Ajouter le nouveau r√¥le
    new_role = discord.utils.get(guild.roles, name=new_role_name)
    if new_role:
        try:
            await member.add_roles(new_role)
            print(f"‚úÖ R√¥le '{new_role_name}' attribu√© √† {member}")
        except discord.Forbidden:
            print(f"‚ùå Pas de permission pour attribuer le r√¥le {new_role_name}")
    else:
        print(f"‚ö†Ô∏è R√¥le '{new_role_name}' non trouv√© sur le serveur")

# === COMMANDE D'AIDE ===

@bot.tree.command(name="aide", description="Affiche la liste de toutes les commandes disponibles")
async def help_command(interaction: discord.Interaction):
    """Affiche la liste compl√®te des commandes du bot"""
    embed = discord.Embed(
        title="ü§ñ Guide des Commandes - Bot JdR",
        description="Voici toutes les commandes disponibles pour le bot de jeu de r√¥le",
        color=0x00d4ff
    )

    # Syst√®me de niveaux d'anciennet√©
    niveau_commands = """
**`/niveau`** - V√©rifiez votre niveau et votre XP
‚Ä¢ Affiche votre progression, rang d'anciennet√© et statistiques

**`/classement`** - Classement des membres du serveur
‚Ä¢ Top 15 des membres les plus actifs avec leurs niveaux
    """
    embed.add_field(name="üìä Syst√®me de Niveaux", value=niveau_commands, inline=False)

    # Gestion des personnages
    character_commands = """
**`/creer_personnage <nom>`** - Cr√©er un nouveau personnage
‚Ä¢ Interface interactive pour choisir sp√©cialit√© et bonus

**`/mes_personnages`** - Liste de vos personnages
‚Ä¢ Vue d'ensemble de tous vos personnages cr√©√©s

**`/stats_personnage <nom>`** - Statistiques d√©taill√©es
‚Ä¢ Voir toutes les stats d'un personnage avec barres de progression

**`/entrainer <nom> <statistique>`** - Entra√Æner un personnage
‚Ä¢ Am√©liorer une statistique (chant, danse, √©loquence, acting, fitness, esth√©tique)
‚Ä¢ Gain de 750-1250 XP + bonus de sp√©cialit√©

**`/supprimer_personnage <nom>`** - Supprimer un personnage
‚Ä¢ Suppression s√©curis√©e avec confirmation obligatoire
    """
    embed.add_field(name="üé≠ Gestion des Personnages", value=character_commands, inline=False)

    # Sp√©cialit√©s disponibles
    specialties_info = """
**üéµ Chanteur** - Chant niveau 3
**üíÉ Danseur** - Danse niveau 3  
**üé≠ Acteur** - Acting niveau 3
**üì∞ Reporter** - √âloquence niveau 3
**üí™ Coach** - Fitness niveau 3
**‚ú® Mannequin** - Esth√©tique niveau 3
**üìö √âtudiant** - +10% XP entra√Ænement
**üë®‚Äçüè´ Professeur** - Stat niveau 2 + 5% XP
**‚≠ê Influenceur** - R√©putation 1000
**‚ùì Autre** - Sp√©cialit√© personnalis√©e
    """
    embed.add_field(name="üéØ Sp√©cialit√©s Disponibles", value=specialties_info, inline=False)

    # Syst√®me automatique
    auto_system = """
‚Ä¢ **+3 √† 5 XP** par message envoy√© automatiquement
‚Ä¢ **Mont√©e de niveau** automatique avec notifications
‚Ä¢ **Attribution des r√¥les** d'anciennet√© automatique :
  ‚îî Niveaux 1-9 : **newcomer**
  ‚îî Niveaux 10-19 : **rising** 
  ‚îî Niveaux 20-29 : **yapper**
  ‚îî Niveau 30+ : **go outside touch some grass**
‚Ä¢ **Limites de personnages** bas√©es sur l'anciennet√©
    """
    embed.add_field(name="‚öôÔ∏è Syst√®me Automatique", value=auto_system, inline=False)

    # Administration (si permissions)
    if interaction.user.guild_permissions.administrator:
        admin_commands = """
**`/admin_reset_user <utilisateur>`** - Reset complet d'un utilisateur
‚Ä¢ Supprime niveau, XP, personnages et r√¥les (Admin seulement)
        """
        embed.add_field(name="üõ°Ô∏è Commandes d'Administration", value=admin_commands, inline=False)

    # Informations suppl√©mentaires
    embed.add_field(
        name="‚ÑπÔ∏è Formules et Informations",
        value="‚Ä¢ **Niveaux d'anciennet√©** : p(1)=200, p(n+1)=p(n)√ó1.4\n"
              "‚Ä¢ **Statistiques personnage** : e(1)=5000, e(n+1)=e(n)+(120√ó(n+1))\n"
              "‚Ä¢ **Entra√Ænement** : 750-1250 XP + bonus sp√©cialit√©\n"
              "‚Ä¢ **Base de donn√©es SQLite** int√©gr√©e pour la persistance\n"
              "‚Ä¢ Toutes les actions critiques ont des **confirmations de s√©curit√©**",
        inline=False
    )

    embed.set_footer(text="üéÆ Bot JdR ‚Ä¢ Tapez /aide pour revoir ces commandes √† tout moment")
    embed.timestamp = datetime.now()

    await interaction.response.send_message(embed=embed, ephemeral=True)

# === COMMANDES POUR LE SYST√àME DE NIVEAUX ===

@bot.tree.command(name="niveau", description="V√©rifiez votre niveau et votre XP")
async def check_level(interaction: discord.Interaction):
    """Affiche le niveau et l'XP de l'utilisateur"""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM user_levels WHERE user_id = ?", (interaction.user.id,))
    user = cursor.fetchone()

    if not user:
        await interaction.response.send_message("‚ùå Vous n'avez pas encore envoy√© de messages!", ephemeral=True)
        conn.close()
        return

    level = user[2]
    exp = user[3]
    total_messages = user[4]
    exp_needed_next = calc_level_exp(level + 1) - exp
    exp_for_current = calc_level_exp(level)
    seniority_role = get_seniority_role(level)

    embed = discord.Embed(
        title=f"üìä Niveau de {interaction.user.display_name}", 
        color=0x00ff00
    )
    embed.add_field(name="üèÜ Niveau", value=f"**{level}**", inline=True)
    embed.add_field(name="‚ö° XP actuelle", value=f"**{exp}**", inline=True)
    embed.add_field(name="üéØ XP manquante", value=f"**{exp_needed_next}**", inline=True)
    embed.add_field(name="üìà Messages envoy√©s", value=f"**{total_messages}**", inline=True)
    embed.add_field(name="üé≠ Rang d'anciennet√©", value=f"**{seniority_role}**", inline=True)
    embed.add_field(name="üíé XP pour ce niveau", value=f"**{exp_for_current}**", inline=True)

    # Barre de progression
    progress_percentage = (exp / calc_level_exp(level + 1)) * 100
    progress_bar = "‚ñà" * int(progress_percentage // 10) + "‚ñë" * (10 - int(progress_percentage // 10))
    embed.add_field(name="üìä Progression", value=f"`{progress_bar}` {progress_percentage:.1f}%", inline=False)

    embed.set_thumbnail(url=interaction.user.display_avatar.url)
    embed.timestamp = datetime.now()

    await interaction.response.send_message(embed=embed, ephemeral=True)
    conn.close()

@bot.tree.command(name="classement", description="Affiche le classement des membres du serveur")
async def leaderboard(interaction: discord.Interaction):
    """Affiche le classement des utilisateurs"""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    cursor.execute("""SELECT username, level, exp, total_messages 
                     FROM user_levels 
                     ORDER BY level DESC, exp DESC 
                     LIMIT 15""")
    users = cursor.fetchall()

    if not users:
        await interaction.response.send_message("‚ùå Aucun utilisateur trouv√© dans le classement!", ephemeral=True)
        conn.close()
        return

    embed = discord.Embed(
        title="üèÜ Classement des Membres", 
        description="Top 15 des membres les plus actifs",
        color=0xffd700
    )

    medals = ["ü•á", "ü•à", "ü•â"]

    for i, (username, level, exp, messages) in enumerate(users, 1):
        medal = medals[i-1] if i <= 3 else f"**{i}.**"
        seniority = get_seniority_role(level)

        embed.add_field(
            name=f"{medal} {username}",
            value=f"üèÜ Niveau **{level}** ‚Ä¢ ‚ö° **{exp}** XP\nüì® **{messages}** messages ‚Ä¢ üé≠ **{seniority}**",
            inline=False
        )

    embed.set_footer(text=f"Classement mis √† jour ‚Ä¢ {len(users)} membres actifs")
    embed.timestamp = datetime.now()

    await interaction.response.send_message(embed=embed)
    conn.close()

# === SYST√àME DE PERSONNAGES ===

# Sp√©cialit√©s disponibles
SPECIALTIES = [
    "Chanteur", "Danseur", "Acteur", "Reporter", "Coach", "Mannequin",
    "Etudiant", "Professeur", "Influenceur", "Autre"
]

# Types de professeurs
PROFESSOR_TYPES = [
    "Professeur de chant", "Professeur de danse", "Professeur de th√©√¢tre",
    "Professeur de journalisme", "Educateur physique", "Professeur d'art"
]

@bot.tree.command(name="creer_personnage", description="Cr√©er un nouveau personnage de jeu de r√¥le")
@app_commands.describe(nom="Le nom complet du personnage")
async def create_character(interaction: discord.Interaction, nom: str):
    """Cr√©er un nouveau personnage"""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # V√©rifier le nombre de personnages existants
    cursor.execute("SELECT COUNT(*) FROM characters WHERE user_id = ?", (interaction.user.id,))
    character_count = cursor.fetchone()[0]

    # V√©rifier le niveau d'anciennet√© de l'utilisateur
    cursor.execute("SELECT level FROM user_levels WHERE user_id = ?", (interaction.user.id,))
    user_data = cursor.fetchone()

    if not user_data:
        await interaction.response.send_message("‚ùå Vous devez d'abord envoyer des messages pour obtenir un niveau!", ephemeral=True)
        conn.close()
        return

    user_level = user_data[0]
    seniority_role = get_seniority_role(user_level)
    character_limit = get_character_limit(seniority_role)

    if character_count >= character_limit:
        await interaction.response.send_message(
            f"‚ùå Vous avez atteint la limite de **{character_limit}** personnages pour votre rang d'anciennet√© (**{seniority_role}**)!\n"
            f"üí° Montez de niveau pour d√©bloquer plus de personnages!",
            ephemeral=True
        )
        conn.close()
        return

    # V√©rifier si le nom est d√©j√† pris
    cursor.execute("SELECT * FROM characters WHERE character_name = ?", (nom,))
    if cursor.fetchone():
        await interaction.response.send_message("‚ùå Ce nom de personnage est d√©j√† pris!", ephemeral=True)
        conn.close()
        return

    # Classes pour l'interface utilisateur
    class SpecialtySelect(discord.ui.Select):
        def __init__(self):
            options = [
                discord.SelectOption(
                    label=spec, 
                    value=spec,
                    description=get_specialty_description(spec)
                ) for spec in SPECIALTIES
            ]
            super().__init__(placeholder="Choisissez une sp√©cialit√©...", options=options)

        async def callback(self, select_interaction: discord.Interaction):
            specialty = self.values[0]

            if specialty == "Autre":
                modal = CustomSpecialtyModal(nom)
                await select_interaction.response.send_modal(modal)
            elif specialty == "Professeur":
                # Afficher un deuxi√®me menu pour le type de professeur
                view = ProfessorTypeView(nom)
                await select_interaction.response.edit_message(
                    content="Choisissez votre type de professeur:",
                    view=view
                )
            else:
                await create_character_with_specialty(select_interaction, nom, specialty)

    class ProfessorTypeSelect(discord.ui.Select):
        def __init__(self, char_name):
            self.char_name = char_name
            options = [
                discord.SelectOption(label=prof_type, value=prof_type) 
                for prof_type in PROFESSOR_TYPES
            ]
            super().__init__(placeholder="Choisissez votre sp√©cialisation...", options=options)

        async def callback(self, select_interaction: discord.Interaction):
            specialty = self.values[0]
            await create_character_with_specialty(select_interaction, self.char_name, specialty)

    class ProfessorTypeView(discord.ui.View):
        def __init__(self, char_name):
            super().__init__(timeout=300)
            self.add_item(ProfessorTypeSelect(char_name))

    class CustomSpecialtyModal(discord.ui.Modal):
        def __init__(self, character_name):
            super().__init__(title="Sp√©cialit√© personnalis√©e")
            self.character_name = character_name
            self.specialty_input = discord.ui.TextInput(
                label="Votre sp√©cialit√©",
                placeholder="Ex: Photographe, √âcrivain, Cuisinier...",
                max_length=50,
                min_length=2
            )
            self.add_item(self.specialty_input)

        async def on_submit(self, modal_interaction: discord.Interaction):
            specialty = self.specialty_input.value
            await create_character_with_specialty(modal_interaction, self.character_name, specialty)

    async def create_character_with_specialty(inter: discord.Interaction, char_name: str, specialty: str):
        """Cr√©er le personnage avec la sp√©cialit√© choisie"""
        conn = sqlite3.connect('bot_database.db')
        cursor = conn.cursor()

        # Statistiques de base
        stats = {
            'chant': 1, 'danse': 1, 'eloquence': 1, 'acting': 1,
            'fitness': 1, 'esthetique': 1, 'reputation': 500
        }

        specialty_bonus = ""

        # Appliquer les bonus de sp√©cialit√©
        if specialty == "Chanteur":
            stats['chant'] = 3
            specialty_bonus = "üéµ Chant niveau 3"
        elif specialty == "Danseur":
            stats['danse'] = 3
            specialty_bonus = "üíÉ Danse niveau 3"
        elif specialty == "Acteur":
            stats['acting'] = 3
            specialty_bonus = "üé≠ Acting niveau 3"
        elif specialty == "Reporter":
            stats['eloquence'] = 3
            specialty_bonus = "üó£Ô∏è √âloquence niveau 3"
        elif specialty == "Coach":
            stats['fitness'] = 3
            specialty_bonus = "üí™ Fitness niveau 3"
        elif specialty == "Mannequin":
            stats['esthetique'] = 3
            specialty_bonus = "‚ú® Esth√©tique niveau 3"
        elif specialty == "Influenceur":
            stats['reputation'] = 1000
            specialty_bonus = "‚≠ê R√©putation 1000"
        elif "Professeur de chant" in specialty:
            stats['chant'] = 2
            specialty_bonus = "üéµ Chant niveau 2 + bonus XP 5%"
        elif "Professeur de danse" in specialty:
            stats['danse'] = 2
            specialty_bonus = "üíÉ Danse niveau 2 + bonus XP 5%"
        elif "Professeur de th√©√¢tre" in specialty:
            stats['acting'] = 2
            specialty_bonus = "üé≠ Acting niveau 2 + bonus XP 5%"
        elif "Professeur de journalisme" in specialty:
            stats['eloquence'] = 2
            specialty_bonus = "üó£Ô∏è √âloquence niveau 2 + bonus XP 5%"
        elif "Educateur physique" in specialty:
            stats['fitness'] = 2
            specialty_bonus = "üí™ Fitness niveau 2 + bonus XP 5%"
        elif "Professeur d'art" in specialty:
            stats['esthetique'] = 2
            specialty_bonus = "‚ú® Esth√©tique niveau 2 + bonus XP 5%"
        elif specialty == "Etudiant":
            specialty_bonus = "üìö Bonus XP entra√Ænement +10%"

        # Cr√©er le personnage
        cursor.execute("""INSERT INTO characters 
                         (user_id, character_name, specialty, chant, danse, eloquence, acting, fitness, esthetique, reputation)
                         VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                      (inter.user.id, char_name, specialty, stats['chant'], stats['danse'],
                       stats['eloquence'], stats['acting'], stats['fitness'], stats['esthetique'], stats['reputation']))

        conn.commit()
        conn.close()

        embed = discord.Embed(title="‚ú® Nouveau personnage cr√©√©!", color=0x00ff00)
        embed.add_field(name="üìõ Nom", value=char_name, inline=True)
        embed.add_field(name="üéØ Sp√©cialit√©", value=specialty, inline=True)
        embed.add_field(name="üéÅ Bonus", value=specialty_bonus or "Aucun bonus", inline=False)

        stats_text = f"""
üéµ **Chant:** {stats['chant']}
üíÉ **Danse:** {stats['danse']}
üó£Ô∏è **√âloquence:** {stats['eloquence']}
üé≠ **Acting:** {stats['acting']}
üí™ **Fitness:** {stats['fitness']}
‚ú® **Esth√©tique:** {stats['esthetique']}
‚≠ê **R√©putation:** {stats['reputation']}
        """
        embed.add_field(name="üìä Statistiques", value=stats_text, inline=False)

        embed.set_footer(text=f"Cr√©√© par {inter.user.display_name}")
        embed.timestamp = datetime.now()

        await inter.response.edit_message(content=None, embed=embed, view=None)

    def get_specialty_description(specialty):
        """Retourne une description pour chaque sp√©cialit√©"""
        descriptions = {
            "Chanteur": "Chant niveau 3",
            "Danseur": "Danse niveau 3", 
            "Acteur": "Acting niveau 3",
            "Reporter": "√âloquence niveau 3",
            "Coach": "Fitness niveau 3",
            "Mannequin": "Esth√©tique niveau 3",
            "Etudiant": "+10% XP entra√Ænement",
            "Professeur": "Voir sous-sp√©cialit√©s",
            "Influenceur": "R√©putation 1000",
            "Autre": "Sp√©cialit√© personnalis√©e"
        }
        return descriptions.get(specialty, "")

    view = discord.ui.View(timeout=300)
    view.add_item(SpecialtySelect())

    embed = discord.Embed(
        title="üé≠ Cr√©ation de personnage",
        description=f"**Nom du personnage:** {nom}\n\nChoisissez la sp√©cialit√© de votre personnage:",
        color=0x0099ff
    )
    embed.add_field(
        name="‚ÑπÔ∏è Informations",
        value=f"‚Ä¢ Vous avez **{character_count}/{character_limit}** personnages\n‚Ä¢ Rang d'anciennet√©: **{seniority_role}**",
        inline=False
    )

    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    conn.close()

@bot.tree.command(name="mes_personnages", description="Voir la liste de vos personnages")
async def list_characters(interaction: discord.Interaction):
    """Affiche la liste des personnages de l'utilisateur"""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    cursor.execute("""SELECT character_name, specialty, chant, danse, eloquence, acting, fitness, esthetique, reputation
                     FROM characters WHERE user_id = ? ORDER BY created_at""", (interaction.user.id,))
    characters = cursor.fetchall()

    if not characters:
        await interaction.response.send_message("‚ùå Vous n'avez aucun personnage cr√©√©!", ephemeral=True)
        conn.close()
        return

    embed = discord.Embed(
        title=f"üé≠ Personnages de {interaction.user.display_name}",
        color=0x9932cc
    )

    for char_name, specialty, chant, danse, eloquence, acting, fitness, esthetique, reputation in characters:
        total_level = chant + danse + eloquence + acting + fitness + esthetique
        embed.add_field(
            name=f"üìõ {char_name}",
            value=f"üéØ **{specialty}**\nüìä Niveau total: **{total_level}**\n‚≠ê R√©putation: **{reputation}**",
            inline=True
        )

    embed.set_footer(text=f"Total: {len(characters)} personnage(s)")
    embed.timestamp = datetime.now()

    await interaction.response.send_message(embed=embed, ephemeral=True)
    conn.close()

@bot.tree.command(name="stats_personnage", description="Voir les statistiques d√©taill√©es d'un personnage")
@app_commands.describe(nom="Le nom du personnage")
async def character_stats(interaction: discord.Interaction, nom: str):
    """Affiche les statistiques d'un personnage"""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM characters WHERE character_name = ? AND user_id = ?", (nom, interaction.user.id))
    character = cursor.fetchone()

    if not character:
        await interaction.response.send_message("‚ùå Personnage non trouv√© ou ne vous appartient pas!", ephemeral=True)
        conn.close()
        return

    embed = discord.Embed(
        title=f"üìä Statistiques de {character[2]}", 
        description=f"üéØ **Sp√©cialit√©:** {character[3]}",
        color=0x0099ff
    )

    # Statistiques avec barres de progression
    stats = [
        ("üéµ Chant", character[4], character[11]),
        ("üíÉ Danse", character[5], character[12]),
        ("üó£Ô∏è √âloquence", character[6], character[13]),
        ("üé≠ Acting", character[7], character[14]),
        ("üí™ Fitness", character[8], character[15]),
        ("‚ú® Esth√©tique", character[9], character[16])
    ]

    for stat_name, level, exp in stats:
        exp_needed = calc_stat_exp(level + 1)
        progress = (exp / exp_needed) * 100 if exp_needed > 0 else 0
        progress_bar = "‚ñà" * int(progress // 10) + "‚ñë" * (10 - int(progress // 10))

        embed.add_field(
            name=stat_name,
            value=f"**Niveau {level}** ({exp}/{exp_needed} XP)\n`{progress_bar}` {progress:.1f}%",
            inline=True
        )

    embed.add_field(
        name="‚≠ê R√©putation",
        value=f"**{character[10]}** points",
        inline=True
    )

    total_level = sum(character[4:10]) - character[10]  # Exclure la r√©putation du total
    embed.add_field(
        name="üìà Niveau total",
        value=f"**{total_level}** niveaux",
        inline=True
    )

    embed.set_footer(text=f"Personnage de {interaction.user.display_name}")
    embed.timestamp = datetime.now()

    await interaction.response.send_message(embed=embed, ephemeral=True)
    conn.close()

@bot.tree.command(name="entrainer", description="Entra√Æner une statistique de votre personnage")
@app_commands.describe(
    nom="Le nom du personnage",
    statistique="La statistique √† entra√Æner"
)
@app_commands.choices(statistique=[
    app_commands.Choice(name="üéµ Chant", value="chant"),
    app_commands.Choice(name="üíÉ Danse", value="danse"),
    app_commands.Choice(name="üó£Ô∏è √âloquence", value="eloquence"),
    app_commands.Choice(name="üé≠ Acting", value="acting"),
    app_commands.Choice(name="üí™ Fitness", value="fitness"),
    app_commands.Choice(name="‚ú® Esth√©tique", value="esthetique")
])
async def train_character(interaction: discord.Interaction, nom: str, statistique: str):
    """Entra√Æner une statistique d'un personnage"""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM characters WHERE character_name = ? AND user_id = ?", (nom, interaction.user.id))
    character = cursor.fetchone()

    if not character:
        await interaction.response.send_message("‚ùå Personnage non trouv√© ou ne vous appartient pas!", ephemeral=True)
        conn.close()
        return

    # Calculer l'XP gagn√©e
    base_exp = random.randint(750, 1250)
    multiplier = 1.0
    specialty = character[3]

    # Bonus pour les √©tudiants
    if specialty == "Etudiant":
        multiplier *= 1.1  # +10%

    # Bonus pour les professeurs sp√©cialis√©s
    elif "Professeur" in specialty:
        stat_matches = {
            "chant": "chant",
            "danse": "danse", 
            "acting": "th√©√¢tre",
            "eloquence": "journalisme",
            "fitness": "physique",
            "esthetique": "art"
        }

        if stat_matches.get(statistique, "").lower() in specialty.lower():
            multiplier *= 1.05  # +5%

    final_exp = int(base_exp * multiplier)

    # R√©cup√©rer les statistiques actuelles
    stat_indices = {
        'chant': (4, 11), 'danse': (5, 12), 'eloquence': (6, 13),
        'acting': (7, 14), 'fitness': (8, 15), 'esthetique': (9, 16)
    }

    level_idx, exp_idx = stat_indices[statistique]
    current_level = character[level_idx]
    current_exp = character[exp_idx]

    new_exp = current_exp + final_exp
    new_level = current_level
    levels_gained = 0

    # V√©rifier les mont√©es de niveau
    while True:
        exp_needed = calc_stat_exp(new_level + 1)
        if new_exp >= exp_needed:
            new_level += 1
            new_exp -= exp_needed
            levels_gained += 1
        else:
            break

    # Mettre √† jour la base de donn√©es
    cursor.execute(f"UPDATE characters SET {statistique} = ?, {statistique}_exp = ? WHERE id = ?",
                   (new_level, new_exp, character[0]))

    conn.commit()
    conn.close()

    # Cr√©er la r√©ponse
    stat_names = {
        'chant': 'üéµ Chant',
        'danse': 'üíÉ Danse',
        'eloquence': 'üó£Ô∏è √âloquence',
        'acting': 'üé≠ Acting',
        'fitness': 'üí™ Fitness',
        'esthetique': '‚ú® Esth√©tique'
    }

    embed = discord.Embed(title="üèãÔ∏è Entra√Ænement termin√©!", color=0x00ff00)
    embed.add_field(name="üìõ Personnage", value=nom, inline=True)
    embed.add_field(name="üìä Statistique", value=stat_names[statistique], inline=True)
    embed.add_field(name="‚ö° XP gagn√©e", value=f"**{final_exp}** XP", inline=True)

    if multiplier > 1.0:
        bonus_percent = (multiplier - 1.0) * 100
        embed.add_field(name="üéÅ Bonus", value=f"+{bonus_percent:.0f}% ({specialty})", inline=True)

    if levels_gained > 0:
        if levels_gained == 1:
            embed.add_field(name="üéâ Niveau atteint!", value=f"Niveau **{new_level}**", inline=False)
        else:
            embed.add_field(name="üöÄ Niveaux gagn√©s!", value=f"**{levels_gained}** niveaux! Nouveau niveau: **{new_level}**", inline=False)
        embed.color = 0xffd700

    embed.set_footer(text=f"Entra√Ænement par {interaction.user.display_name}")
    embed.timestamp = datetime.now()

    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.tree.command(name="supprimer_personnage", description="Supprimer un de vos personnages")
@app_commands.describe(nom="Le nom du personnage √† supprimer")
async def delete_character(interaction: discord.Interaction, nom: str):
    """Supprimer un personnage avec confirmation"""
    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    cursor.execute("SELECT * FROM characters WHERE character_name = ? AND user_id = ?", (nom, interaction.user.id))
    character = cursor.fetchone()

    if not character:
        await interaction.response.send_message("‚ùå Personnage non trouv√© ou ne vous appartient pas!", ephemeral=True)
        conn.close()
        return

    class ConfirmView(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=60)

        @discord.ui.button(label="‚úÖ Confirmer", style=discord.ButtonStyle.danger)
        async def confirm(self, button_interaction: discord.Interaction, button: discord.ui.Button):
            conn = sqlite3.connect('bot_database.db')
            cursor = conn.cursor()
            cursor.execute("DELETE FROM characters WHERE id = ?", (character[0],))
            conn.commit()
            conn.close()

            embed = discord.Embed(
                title="üóëÔ∏è Personnage supprim√©",
                description=f"Le personnage **{nom}** a √©t√© d√©finitivement supprim√©.",
                color=0xff0000
            )
            embed.set_footer(text=f"Suppression confirm√©e par {button_interaction.user.display_name}")

            await button_interaction.response.edit_message(content=None, embed=embed, view=None)

        @discord.ui.button(label="‚ùå Annuler", style=discord.ButtonStyle.secondary)
        async def cancel(self, button_interaction: discord.Interaction, button: discord.ui.Button):
            embed = discord.Embed(
                title="‚ùå Suppression annul√©e",
                description=f"Le personnage **{nom}** n'a pas √©t√© supprim√©.",
                color=0x808080
            )
            await button_interaction.response.edit_message(content=None, embed=embed, view=None)

    view = ConfirmView()

    embed = discord.Embed(
        title="‚ö†Ô∏è Confirmation de suppression",
        description=f"√ätes-vous **vraiment s√ªr** de vouloir supprimer le personnage **{nom}** ?\n\n‚ö†Ô∏è **Cette action est irr√©versible!**",
        color=0xffa500
    )
    embed.add_field(
        name="üìä Statistiques du personnage",
        value=f"üéØ Sp√©cialit√©: {character[3]}\nüìà Niveaux cumul√©s: {sum(character[4:10]) - character[10]}",
        inline=False
    )

    await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
    conn.close()

# === COMMANDES D'ADMINISTRATION (OPTIONNELLES) ===

@bot.tree.command(name="admin_reset_user", description="[ADMIN] Remettre √† z√©ro le niveau d'un utilisateur")
@app_commands.describe(utilisateur="L'utilisateur √† remettre √† z√©ro")
async def admin_reset_user(interaction: discord.Interaction, utilisateur: discord.Member):
    """Commande d'administration pour remettre √† z√©ro un utilisateur"""
    # V√©rifier si l'utilisateur a les permissions d'administrateur
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå Vous n'avez pas les permissions pour utiliser cette commande!", ephemeral=True)
        return

    conn = sqlite3.connect('bot_database.db')
    cursor = conn.cursor()

    # Supprimer l'utilisateur de la base de donn√©es
    cursor.execute("DELETE FROM user_levels WHERE user_id = ?", (utilisateur.id,))
    cursor.execute("DELETE FROM characters WHERE user_id = ?", (utilisateur.id,))

    conn.commit()
    conn.close()

    # Supprimer tous les r√¥les d'anciennet√©
    old_roles = ["newcomer", "rising", "yapper", "go outside touch some grass"]
    for role_name in old_roles:
        role = discord.utils.get(interaction.guild.roles, name=role_name)
        if role and role in utilisateur.roles:
            try:
                await utilisateur.remove_roles(role)
            except discord.Forbidden:
                pass

    embed = discord.Embed(
        title="üîÑ Utilisateur remis √† z√©ro",
        description=f"L'utilisateur {utilisateur.mention} a √©t√© remis √† z√©ro.\n\n‚úÖ Niveau et XP supprim√©s\n‚úÖ Personnages supprim√©s\n‚úÖ R√¥les d'anciennet√© retir√©s",
        color=0x00ff00
    )

    await interaction.response.send_message(embed=embed)

if __name__ == "__main__":
    # V√©rification du token
    if TOKEN == "VOTRE_TOKEN_ICI":
        print("‚ùå ERREUR: Vous devez remplacer TOKEN par votre vrai token Discord!")
        print("üìù Instructions:")
        print("1. Allez sur https://discord.com/developers/applications")
        print("2. Cr√©ez une nouvelle application")
        print("3. Allez dans l'onglet 'Bot'")
        print("4. Copiez le token et remplacez 'VOTRE_TOKEN_ICI' dans le code")
    else:
        print("üöÄ D√©marrage du bot...")
        bot.run(TOKEN)
